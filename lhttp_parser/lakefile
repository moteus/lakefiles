PROJECT = 'lhttp_parser'

if LUA_VER == '5.2' then
  LUA_NEED = 'lua52'
  LUA_DIR = ENV.LUA_DIR_5_2 or ENV.LUA_DIR
  LUA_RUNNER = 'lua52'
else
  LUA_NEED = 'lua51'
  LUA_DIR = ENV.LUA_DIR
  LUA_RUNNER = 'lua'
end

DYNAMIC = DYNAMIC or false

PARSER_NEED = IF(DYNAMIC, 'http_parser-static-md', 'http_parser-static-mt')

INSTALL_DIR = INSTALL_DIR or J(LUA_DIR,'libs',PROJECT)

parser = c.shared{'lhttp_parser',
  base = '.',
  src = 'lhttp_parser.c',
  needs = {LUA_NEED,PARSER_NEED};
  dynamic = DYNAMIC;
  strip = true,
  defines = {
    "WINDOWS";
    "_WINDLL";
    "_USRDLL";
  };
  libflags = IF(MSVC, '/EXPORT:luaopen_lhttp_parser');
}

target('build', parser)

install = target('install', {
  file.group{odir=J(INSTALL_DIR, 'share');src = parser };
  file.group{odir=J(INSTALL_DIR, 'test'); src = 'test.lua'};
  file.group{odir=J(INSTALL_DIR, 'test'); src = 'utils.lua'};
})

local function run(file, cwd)
  print()
  print("run " .. file)
  if not TESTING then
    if cwd then lake.chdir(cwd) end
    os.execute( LUA_RUNNER .. ' ' .. file )
    if cwd then lake.chdir("<") end
    print()
  end
end

target('test', install, function()
  local test_dir = J(INSTALL_DIR,'test')
  run(J(test_dir,'test.lua'), test_dir)
end)